<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.kingdee.exam.dao.QuestionBankMapper" >

	<resultMap id="QuestionBankVoMap" type="com.kingdee.exam.entity.vo.QuestionBankVo">
	    <id column="question_bank_id" property="questionBankId" jdbcType="INTEGER" />
	    <result column="stem" property="stem" jdbcType="LONGVARCHAR" />
	    <result column="answer" property="answer" jdbcType="VARCHAR" />
	    <result column="tests_type" property="testsType" jdbcType="INTEGER" />
	    <result column="state" property="state" jdbcType="INTEGER" />
	    <collection property="options" ofType="com.kingdee.exam.entity.Options">
		    <id column="options_id" property="optionsId" jdbcType="INTEGER" />
		    <result column="op" property="op" jdbcType="VARCHAR" />
		    <result column="content" property="content" jdbcType="VARCHAR" />
	    </collection>
        <collection property="codingProblem" ofType="com.kingdee.exam.voj.model.Problem">
            <id column="problem_id" property="problemId" jdbcType="INTEGER" />
            <result column="description" property="description" jdbcType="VARCHAR" />
            <result column="hint" property="hint" jdbcType="VARCHAR" />
            <result column="input_format" property="inputFormat" jdbcType="VARCHAR" />
            <result column="output_format" property="outputFormat" jdbcType="VARCHAR" />
            <result column="sample_input" property="inputSample" jdbcType="VARCHAR" />
            <result column="sample_output" property="outputSample" jdbcType="VARCHAR" />
            <result column="memory_limit" property="memoryLimit" jdbcType="VARCHAR" />
            <result column="time_limit" property="timeLimit" jdbcType="VARCHAR" />
            <result column="testCases" property="testCases" jdbcType="LONGVARCHAR" />
        </collection>
	</resultMap>
	
	<!-- 查询所有题库 -->
	<select id="findAllQuestionBank" resultMap="QuestionBankVoMap">
		SELECT
			question_bank.question_bank_id,
			question_bank.stem,
			question_bank.answer,
			question_bank.tests_type,
			question_bank.state,
			options.options_id,
			options.op,
			options.content,
			`description`,
			`hint`,
			`input_format`,
			`output_format`,
			`sample_input`,
			`sample_output`,
			`memory_limit`,
			`time_limit`,
            concat('[',testCases,']') as testCases
		FROM
			question_bank
		LEFT JOIN options ON question_bank.question_bank_id = options.question_bank_id
		LEFT JOIN voj_problems ON question_bank.question_bank_id = voj_problems.question_bank_id
        LEFT JOIN (select problem_id,
                       REPLACE(REPLACE(group_concat(
                                               concat('{"input":"',`checkpoint_input`,'","output":"',`checkpoint_output`,'"}')),
                                       CHAR(10), ''),
                               CHAR(13), '') as testCases
                   from voj_problem_checkpoints group by problem_id) as t3 ON voj_problems.problem_id=t3.problem_id
		WHERE
			question_bank.state = 1
		ORDER BY
			question_bank_id ASC
	</select>
	
	<!-- 添加题库 -->
	<insert id="addQuestionBank" parameterType="com.kingdee.exam.entity.vo.QuestionBankVo" useGeneratedKeys="true" keyProperty="questionBankId">
		INSERT INTO question_bank (
			stem,
			answer,
			tests_type,
			state
		)
		VALUES
			(
				#{stem},
				#{answer},
				#{testsType},
				#{state}
			)		
	</insert>
	
	<!-- 添加题库选项 -->
	<insert id="addOptions" parameterType="java.util.List">
		INSERT INTO `options` (
			op,
			content,
			question_bank_id
		)
		VALUES
			<foreach collection="list" item="item" index="index" separator=",">(#{item.op}, #{item.content}, #{item.questionBankId})</foreach>	
	</insert>
	
	<!-- 更新状态 代替删除 -->
	<update id="updateQuestionBankState" parameterType="String">
		UPDATE question_bank
		SET question_bank.state = 0
		WHERE
			question_bank.question_bank_id = #{value}
	</update>
	
	<!-- 更新题目 -->
	<update id="updateQuestionBank" parameterType="com.kingdee.exam.entity.vo.QuestionBankVo">
		UPDATE question_bank
		SET stem = #{stem},
		 answer = #{answer},
		 tests_type = #{testsType}
		WHERE
			question_bank_id = #{questionBankId}
	</update>
	
	<!-- 删除题目的选项内容 -->
	<delete id="deleteQuestionBankOptions" parameterType="String">
		DELETE
		FROM
			`options`
		WHERE
			question_bank_id = #{value}		
	</delete>

</mapper>