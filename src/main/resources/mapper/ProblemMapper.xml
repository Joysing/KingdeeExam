<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kingdee.exam.voj.mapper.ProblemMapper">
	<!-- ResultMap -->
	<resultMap id="ProblemResultMap" type="com.kingdee.exam.voj.model.Problem">
		<id property="problemId" column="problem_id" />
		<result property="problemName" column="problem_name" />
		<result property="totalSubmission" column="total_submission" />
		<result property="acceptedSubmission" column="accepted_submission" />
		<result property="timeLimit" column="time_limit" />
		<result property="memoryLimit" column="memory_limit" />
		<result property="description" column="description" />
		<result property="inputFormat" column="input_format" />
		<result property="outputFormat" column="output_format" />
		<result property="sampleInput" column="sample_input" />
		<result property="sampleOutput" column="sample_output" />
		<result property="hint" column="problem_hint" />
	</resultMap>

	<!-- Methods -->
	<select id="getNumberOfProblems" 
		resultType="long"
		useCache="true">
		SELECT COUNT(*) 
		FROM voj_problems
	</select>
	<select id="getNumberOfProblemsUsingFilters" 
		parameterType="map"
		resultType="long"
		useCache="true">
		SELECT COUNT(DISTINCT(problem_id)) 
		FROM voj_problems 
		NATURAL JOIN voj_problem_category_relationships pcr
		NATURAL JOIN voj_problem_categories pc
		<where>
			<if test="keyword != null and keyword != ''">
				AND problem_name LIKE "%"#{keyword}"%"
			</if>
			<if test="problemCategoryId != 0">
				AND problem_category_id = #{problemCategoryId} 
			</if>
		</where>
	</select>
	<select id="getLowerBoundOfProblems" 
		resultType="long"
		useCache="true">
		SELECT MIN(problem_id) 
		FROM voj_problems
	</select>
	<select id="getUpperBoundOfProblems" 
		resultType="long"
		useCache="true">
		SELECT MAX(problem_id) 
		FROM voj_problems
	</select>
	<select id="getUpperBoundOfProblemsWithLimit" 
		parameterType="map"
		resultType="long"
		useCache="true">
		SELECT MAX(problem_id)
		FROM (
			SELECT problem_id
			FROM voj_problems
			WHERE problem_id >= #{problemId}
			LIMIT #{limit}
		) p
	</select>
	<select id="getProblem" 
		parameterType="long"
		resultMap="ProblemResultMap"
		useCache="true">
		SELECT *, (
			SELECT COUNT(*) 
			FROM voj_submissions s 
			WHERE s.problem_id = p.problem_id
		) AS total_submission, (
			SELECT COUNT(*) 
			FROM voj_submissions s 
			WHERE s.problem_id = p.problem_id AND s.submission_judge_result = 'AC'
		) AS accepted_submission
		FROM voj_problems p 
		WHERE problem_id = #{problemId}
	</select>
	<select id="getProblemByQuestionBankId"
			parameterType="int"
			resultMap="ProblemResultMap"
			useCache="true">
		SELECT *, (
			SELECT COUNT(*)
			FROM voj_submissions s
			WHERE s.problem_id = p.problem_id
		) AS total_submission, (
			SELECT COUNT(*)
			FROM voj_submissions s
			WHERE s.problem_id = p.problem_id AND s.submission_judge_result = 'AC'
		) AS accepted_submission
		FROM voj_problems p
		WHERE question_bank_id = #{questionBankId}
	</select>
	<select id="getProblemsUsingFilters" 
		parameterType="map"
		resultMap="ProblemResultMap"
		useCache="true">
		SELECT DISTINCT(p.problem_id), problem_name, (
			SELECT COUNT(*) 
			FROM voj_submissions s 
			WHERE s.problem_id = p.problem_id
		) AS total_submission, (
			SELECT COUNT(*) 
			FROM voj_submissions s 
			WHERE s.problem_id = p.problem_id AND s.submission_judge_result = 'AC'
		) AS accepted_submission
		FROM voj_problems p 
		NATURAL JOIN voj_problem_category_relationships pcr
		WHERE p.problem_id &gt;= #{problemId}
		<if test="keyword != null and keyword != ''">
			AND problem_name LIKE "%"#{keyword}"%"
		</if>
		<if test="problemCategoryId != 0">
			AND problem_category_id = #{problemCategoryId}
		</if>
		LIMIT #{limit}
	</select>
	<insert id="createProblem" 
		parameterType="com.kingdee.exam.voj.model.Problem"
		flushCache="true" 
		keyProperty="problemId" 
		keyColumn="problem_id"
		useGeneratedKeys="true">
		INSERT INTO voj_problems (question_bank_id,problem_name, time_limit, memory_limit, description, input_format, output_format, sample_input, sample_output, hint)
		VALUES (#{questionBankId}, #{problemName}, #{timeLimit}, #{memoryLimit}, #{description}, #{inputFormat}, #{outputFormat}, #{inputSample}, #{outputSample}, #{hint})
	</insert>
	<update id="updateProblem"
		parameterType="com.kingdee.exam.voj.model.Problem"
		flushCache="true">
		UPDATE voj_problems 
		SET problem_name = #{problemName}, time_limit = #{timeLimit}, memory_limit = #{memoryLimit}, description = #{description}, input_format = #{inputFormat}, output_format = #{outputFormat}, sample_input = #{inputSample}, sample_output = #{outputSample}, hint = #{hint}
		WHERE problem_id = #{problemId}
	</update>
	<delete id="deleteProblem"
		parameterType="long"
		flushCache="true">
		DELETE FROM voj_problems 
		WHERE problem_id = #{problemId}
	</delete>
</mapper>